// Autogenerated from Pigeon (v0.1.23), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.codeheadlabs.zendesk.pigeon;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ZendeskPigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitializeRequest {
    private String accountKey;
    public String getAccountKey() { return accountKey; }
    public void setAccountKey(String setterArg) { this.accountKey = setterArg; }

    private String appId;
    public String getAppId() { return appId; }
    public void setAppId(String setterArg) { this.appId = setterArg; }

    private String deviceToken;
    public String getDeviceToken() { return deviceToken; }
    public void setDeviceToken(String setterArg) { this.deviceToken = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("accountKey", accountKey);
      toMapResult.put("appId", appId);
      toMapResult.put("deviceToken", deviceToken);
      return toMapResult;
    }
    static InitializeRequest fromMap(Map<String, Object> map) {
      InitializeRequest fromMapResult = new InitializeRequest();
      Object accountKey = map.get("accountKey");
      fromMapResult.accountKey = (String)accountKey;
      Object appId = map.get("appId");
      fromMapResult.appId = (String)appId;
      Object deviceToken = map.get("deviceToken");
      fromMapResult.deviceToken = (String)deviceToken;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetDepartmentRequest {
    private String department;
    public String getDepartment() { return department; }
    public void setDepartment(String setterArg) { this.department = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("department", department);
      return toMapResult;
    }
    static SetDepartmentRequest fromMap(Map<String, Object> map) {
      SetDepartmentRequest fromMapResult = new SetDepartmentRequest();
      Object department = map.get("department");
      fromMapResult.department = (String)department;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartChatRequest {
    private Boolean isPreChatFormEnabled;
    public Boolean getIsPreChatFormEnabled() { return isPreChatFormEnabled; }
    public void setIsPreChatFormEnabled(Boolean setterArg) { this.isPreChatFormEnabled = setterArg; }

    private Boolean isOfflineFormEnabled;
    public Boolean getIsOfflineFormEnabled() { return isOfflineFormEnabled; }
    public void setIsOfflineFormEnabled(Boolean setterArg) { this.isOfflineFormEnabled = setterArg; }

    private Boolean isAgentAvailabilityEnabled;
    public Boolean getIsAgentAvailabilityEnabled() { return isAgentAvailabilityEnabled; }
    public void setIsAgentAvailabilityEnabled(Boolean setterArg) { this.isAgentAvailabilityEnabled = setterArg; }

    private Boolean isChatTranscriptPromptEnabled;
    public Boolean getIsChatTranscriptPromptEnabled() { return isChatTranscriptPromptEnabled; }
    public void setIsChatTranscriptPromptEnabled(Boolean setterArg) { this.isChatTranscriptPromptEnabled = setterArg; }

    private String messagingName;
    public String getMessagingName() { return messagingName; }
    public void setMessagingName(String setterArg) { this.messagingName = setterArg; }

    private String iosBackButtonTitle;
    public String getIosBackButtonTitle() { return iosBackButtonTitle; }
    public void setIosBackButtonTitle(String setterArg) { this.iosBackButtonTitle = setterArg; }

    private Long iosNavigationBarColor;
    public Long getIosNavigationBarColor() { return iosNavigationBarColor; }
    public void setIosNavigationBarColor(Long setterArg) { this.iosNavigationBarColor = setterArg; }

    private Long iosNavigationTitleColor;
    public Long getIosNavigationTitleColor() { return iosNavigationTitleColor; }
    public void setIosNavigationTitleColor(Long setterArg) { this.iosNavigationTitleColor = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isPreChatFormEnabled", isPreChatFormEnabled);
      toMapResult.put("isOfflineFormEnabled", isOfflineFormEnabled);
      toMapResult.put("isAgentAvailabilityEnabled", isAgentAvailabilityEnabled);
      toMapResult.put("isChatTranscriptPromptEnabled", isChatTranscriptPromptEnabled);
      toMapResult.put("messagingName", messagingName);
      toMapResult.put("iosBackButtonTitle", iosBackButtonTitle);
      toMapResult.put("iosNavigationBarColor", iosNavigationBarColor);
      toMapResult.put("iosNavigationTitleColor", iosNavigationTitleColor);
      return toMapResult;
    }
    static StartChatRequest fromMap(Map<String, Object> map) {
      StartChatRequest fromMapResult = new StartChatRequest();
      Object isPreChatFormEnabled = map.get("isPreChatFormEnabled");
      fromMapResult.isPreChatFormEnabled = (Boolean)isPreChatFormEnabled;
      Object isOfflineFormEnabled = map.get("isOfflineFormEnabled");
      fromMapResult.isOfflineFormEnabled = (Boolean)isOfflineFormEnabled;
      Object isAgentAvailabilityEnabled = map.get("isAgentAvailabilityEnabled");
      fromMapResult.isAgentAvailabilityEnabled = (Boolean)isAgentAvailabilityEnabled;
      Object isChatTranscriptPromptEnabled = map.get("isChatTranscriptPromptEnabled");
      fromMapResult.isChatTranscriptPromptEnabled = (Boolean)isChatTranscriptPromptEnabled;
      Object messagingName = map.get("messagingName");
      fromMapResult.messagingName = (String)messagingName;
      Object iosBackButtonTitle = map.get("iosBackButtonTitle");
      fromMapResult.iosBackButtonTitle = (String)iosBackButtonTitle;
      Object iosNavigationBarColor = map.get("iosNavigationBarColor");
      fromMapResult.iosNavigationBarColor = (iosNavigationBarColor == null) ? null : ((iosNavigationBarColor instanceof Integer) ? (Integer)iosNavigationBarColor : (Long)iosNavigationBarColor);
      Object iosNavigationTitleColor = map.get("iosNavigationTitleColor");
      fromMapResult.iosNavigationTitleColor = (iosNavigationTitleColor == null) ? null : ((iosNavigationTitleColor instanceof Integer) ? (Integer)iosNavigationTitleColor : (Long)iosNavigationTitleColor);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetVisitorInfoRequest {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private String email;
    public String getEmail() { return email; }
    public void setEmail(String setterArg) { this.email = setterArg; }

    private String phoneNumber;
    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String setterArg) { this.phoneNumber = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("email", email);
      toMapResult.put("phoneNumber", phoneNumber);
      return toMapResult;
    }
    static SetVisitorInfoRequest fromMap(Map<String, Object> map) {
      SetVisitorInfoRequest fromMapResult = new SetVisitorInfoRequest();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object email = map.get("email");
      fromMapResult.email = (String)email;
      Object phoneNumber = map.get("phoneNumber");
      fromMapResult.phoneNumber = (String)phoneNumber;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VisitorTagsRequest {
    private List<Object> tags;
    public List<Object> getTags() { return tags; }
    public void setTags(List<Object> setterArg) { this.tags = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("tags", tags);
      return toMapResult;
    }
    static VisitorTagsRequest fromMap(Map<String, Object> map) {
      VisitorTagsRequest fromMapResult = new VisitorTagsRequest();
      Object tags = map.get("tags");
      fromMapResult.tags = (List<Object>)tags;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VisitorNoteRequest {
    private String note;
    public String getNote() { return note; }
    public void setNote(String setterArg) { this.note = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("note", note);
      return toMapResult;
    }
    static VisitorNoteRequest fromMap(Map<String, Object> map) {
      VisitorNoteRequest fromMapResult = new VisitorNoteRequest();
      Object note = map.get("note");
      fromMapResult.note = (String)note;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ChatApi {
    void initialize(InitializeRequest arg);
    void setDepartment(SetDepartmentRequest arg);
    void startChat(StartChatRequest arg);

    /** Sets up an instance of `ChatApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ChatApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.initialize", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              InitializeRequest input = InitializeRequest.fromMap((Map<String, Object>)message);
              api.initialize(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.setDepartment", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetDepartmentRequest input = SetDepartmentRequest.fromMap((Map<String, Object>)message);
              api.setDepartment(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.startChat", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartChatRequest input = StartChatRequest.fromMap((Map<String, Object>)message);
              api.startChat(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ProfileApi {
    void setVisitorInfo(SetVisitorInfoRequest arg);
    void addVisitorTags(VisitorTagsRequest arg);
    void removeVisitorTags(VisitorTagsRequest arg);
    void setVisitorNote(VisitorNoteRequest arg);
    void appendVisitorNote(VisitorNoteRequest arg);
    void clearVisitorNotes();

    /** Sets up an instance of `ProfileApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ProfileApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.setVisitorInfo", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetVisitorInfoRequest input = SetVisitorInfoRequest.fromMap((Map<String, Object>)message);
              api.setVisitorInfo(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.addVisitorTags", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              VisitorTagsRequest input = VisitorTagsRequest.fromMap((Map<String, Object>)message);
              api.addVisitorTags(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.removeVisitorTags", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              VisitorTagsRequest input = VisitorTagsRequest.fromMap((Map<String, Object>)message);
              api.removeVisitorTags(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.setVisitorNote", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              VisitorNoteRequest input = VisitorNoteRequest.fromMap((Map<String, Object>)message);
              api.setVisitorNote(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.appendVisitorNote", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              VisitorNoteRequest input = VisitorNoteRequest.fromMap((Map<String, Object>)message);
              api.appendVisitorNote(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.clearVisitorNotes", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.clearVisitorNotes();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
